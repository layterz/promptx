"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[162],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>m});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=n.createContext({}),l=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=l(e.components);return n.createElement(c.Provider,{value:a},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),u=r,m=d["".concat(c,".").concat(u)]||d[u]||h[u]||i;return t?n.createElement(m,o(o({ref:a},p),{},{components:t})):n.createElement(m,o({ref:a},p))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var c in a)hasOwnProperty.call(a,c)&&(s[c]=a[c]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9390:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=t(7462),r=(t(7294),t(3905));const i={sidebar_position:1,slug:"/"},o="Getting started",s={unversionedId:"getting-started",id:"getting-started",title:"Getting started",description:"promptz is a framework for building complex prompt-based applications. It provides a simple, flexible API for interacting with generative models, which uses Pydantic models to define the expected prompt output. Once you have generated some data you can store the output as embeddings in collections, which use Pandas to provide a simple, familiar interface.",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/",permalink:"/promptz/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"Guides",permalink:"/promptz/category/guides"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"Setup",id:"setup",level:2},{value:"Structured output",id:"structured-output",level:2},{value:"Storing output",id:"storing-output",level:2},{value:"Querying collections",id:"querying-collections",level:2},{value:"Few shots",id:"few-shots",level:2},{value:"Updating data",id:"updating-data",level:2},{value:"Wrapping up",id:"wrapping-up",level:2}],p={toc:l},d="wrapper";function h(e){let{components:a,...t}=e;return(0,r.kt)(d,(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting started"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"promptz")," is a framework for building complex prompt-based applications. It provides a simple, flexible API for interacting with generative models, which uses ",(0,r.kt)("strong",{parentName:"p"},"Pydantic")," models to define the expected prompt output. Once you have generated some data you can store the output as ",(0,r.kt)("strong",{parentName:"p"},"embeddings")," in collections, which use ",(0,r.kt)("strong",{parentName:"p"},"Pandas")," to provide a simple, familiar interface."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"First, install with pip:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install promptz\n")),(0,r.kt)("p",null,"If this hangs or fails, try running with ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-cache-dir"),"."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Next, we need to initialize the library with the LLM you want to use. Here's an example using OpenAI's ChatGPT:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport promptz\n\nllm = promptz.ChatGPT(\n    api_key=os.environ['OPENAI_API_KEY'],\n    org_id=os.environ['OPENAI_ORGANIZATION_ID'],\n)\n\npromptz.init(llm=llm)\n")),(0,r.kt)("p",null,"Now, let's test it's working with a simple prompt:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"promptz.prompt('What is the capital of France')\n>>> \"The capital of France is Paris.\"\n")),(0,r.kt)("h2",{id:"structured-output"},"Structured output"),(0,r.kt)("p",null,"The real power of ",(0,r.kt)("strong",{parentName:"p"},"promptz")," comes from the ability to define structured output using ",(0,r.kt)("strong",{parentName:"p"},"Pydantic")," models. Let's define a simple model for a character:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from typing import List\nfrom pydantic import BaseModel, Field\nfrom promptz import prompt\n\nclass Character(BaseModel):\n    name: str = Field(..., unique=True, embed=False),\n    description: str = Field(\n        ..., description='Describe the character in a few sentences')\n    age: int = Field(..., min=1, max=120)\n\ncharacters = prompt(\n    'Generate some characters from the Batman universe',\n    output=List[Character],\n)\n")),(0,r.kt)("p",null,"This will return a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"Character")," model instances wrapped in a ",(0,r.kt)("strong",{parentName:"p"},"Pandas")," DataFrame:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    type        name        description                                         age\n0   character   Batman      'Batman' is a brooding figure, his cape flowin...   35\n1   character   Joker       'Joker' is a chaotic force, his face twisted i...   40\n2   character   Catwoman    'Catwoman' is a seductive thief, her lithe for...   30\n")),(0,r.kt)("p",null,"To access the models you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"objects")," helper:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"characters.objects[0]\n>>> Character(name='Batman', description=\"Batman is a wealthy businessman and philanthropist who becomes a vigilante to fight crime in Gotham City. He uses his intelligence, strength, and technology to take down criminals and protect the innocent.\", age=35) \n")),(0,r.kt)("h2",{id:"storing-output"},"Storing output"),(0,r.kt)("p",null,"Now we have some data let's store it in a collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from promptz import store\n\nstore(characters)\n")),(0,r.kt)("p",null,"This returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection"),", which wraps a ",(0,r.kt)("strong",{parentName:"p"},"Pandas")," DataFrame:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    id                                      name        description                                         type        age\n0   ef3061a8-f03e-4425-9411-2873457d72f0    Batman      'Batman' is a brooding figure, his cape flowin...   character   35\n1   a8a3e93b-d186-4900-a065-4cbbad7d0e6b    Joker       'Joker' is a chaotic force, his face twisted i...   character   40\n2   94cccb31-4ac7-4794-936e-dc8057ca6306    Catwoman    'Catwoman' is a seductive thief, her lithe for...   character   30\n")),(0,r.kt)("p",null,"This stores the data in the default collection, but you can also create new collections:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"store(characters, name='characters')\n")),(0,r.kt)("h2",{id:"querying-collections"},"Querying collections"),(0,r.kt)("p",null,"Now we have stored some data we can query it by directly calling the collection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from promptz import query\n\nvillains = query('They are a villain')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    id                                      name        description                                         type        age\n0   a8a3e93b-d186-4900-a065-4cbbad7d0e6b    joker       'joker' is a chaotic force, his face twisted i...   character   40\n1   94cccb31-4ac7-4794-936e-dc8057ca6306    catwoman    'catwoman' is a seductive thief, her lithe for...   character   30\n2   ef3061a8-f03e-4425-9411-2873457d72f0    batman      'batman' is a brooding figure, his cape flowin...   character   35\n")),(0,r.kt)("p",null,"When data is stored in a collection, embeddings are generated for each field on the model - in this case embeddings would be created for name, description and age. When collections are queried the input text is compared to the embeddings for each field and the results are sorted by the closest match across all fields."),(0,r.kt)("p",null,"If you want to query a specific field you can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"field=name")," to the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"villains = characters('They are a villain', field='description')\n")),(0,r.kt)("p",null,"The response from querying a collection is also a ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection"),", so you can chain queries and use standard ",(0,r.kt)("strong",{parentName:"p"},"Pandas")," to further filter the results:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"old_masked_villains = villains('They wear a mask')[villains['age'] > 40]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    id                                      name        description                                         type        age\n0   a8a3e93b-d186-4900-a065-4cbbad7d0e6b    joker       'joker' is a chaotic force, his face twisted i...   character   40\n")),(0,r.kt)("p",null,"To get the first row as a model instance you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"first")," helper:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"old_masked_villains.first\n>>> Character(name='Joker', description=\"Joker is a chaotic force, his face twisted into a permanent grin. He wears a purple suit and a green bow tie, and his hair is dyed green. He is a master of chaos and an agent of anarchy.\", age=40) \n")),(0,r.kt)("h2",{id:"few-shots"},"Few shots"),(0,r.kt)("p",null,"Providing a small number of examples that show the model how you want it to generate data is a powerful way to control the output. You can pass few shots using the ",(0,r.kt)("inlineCode",{parentName:"p"},"examples=")," parameter with a list of tuples containing the input and output."),(0,r.kt)("p",null,"Let's define few shots for our character model using the data we've stored in the collection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from promptz import Prompt, query\n\ncharacters = query(where={'type': 'character'})\np = Prompt(\n    '''\n    Generate a list of new characters from the Batman universe.\n    Don't use any of the existing characters.\n    ''',\n    examples=[\n        (\n            { 'existing_characters': characters['name'][:2].to_list() },\n            characters[2:].objects,\n        ),\n    ],\n    output=List[Character],\n)\n\nfor _ in range(5):\n    existing_characters = query(where={'type': 'character'})\n    try:\n        cs = prompt(prompt=p, input={'existing_characters': existing_characters})\n        store(cs)\n        characters = pd.concat([characters, cs]).reset_index(drop=True)\n    except Exception as e:\n        print(e)\n\ncharacters\n")),(0,r.kt)("p",null,"This example is a bit more complicated so lets breakdown what's going on."),(0,r.kt)("p",null,"First, we fetch the existing characters from the collection and define a prompt instance with ",(0,r.kt)("inlineCode",{parentName:"p"},"examples=")," using that data. In this case we are using the examples to both demonstrate the style of output we want and also to tell the model not to use any of the existing characters."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: we're using ",(0,r.kt)("inlineCode",{parentName:"em"},"Prompt")," to create an instance instead of directly executing it using ",(0,r.kt)("inlineCode",{parentName:"em"},"prompt()")," as we want to reuse the same prompt instance for each iteration of the loop.")),(0,r.kt)("p",null,"Next, we loop over the prompt 5 times, each time passing the existing characters to the prompt as input. This allows the model to learn from the existing characters and generate new ones."),(0,r.kt)("p",null,"Finally, we store the new characters in the collection. Here's the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    id                                      name            description                                         type        age\n0   ef3061a8-f03e-4425-9411-2873457d72f0    Batman          'Batman' is a brooding figure, his cape flowin...   character   35\n1   a8a3e93b-d186-4900-a065-4cbbad7d0e6b    Joker           'Joker' is a chaotic force, his face twisted i...   character   40\n2   94cccb31-4ac7-4794-936e-dc8057ca6306    Catwoman        'Catwoman' is a seductive thief, her lithe for...   character   30\n3   693aa746-15af-4e51-8687-2e0aa052e0ee    Two-Face        Once a respected district attorney, Two-Face's...   character   42\n4   c6e9b988-54cc-498a-b0a2-3a03eeae62c5    Harley Quinn    Harley Quinn, formerly known as Dr. Harleen Qu...   character   29\n5   47f436c6-396c-42f0-8283-b72280e3bf7a    Riddler         The Riddler, also known as Edward Nygma, is ob...   character   35\n6   0bee3f9f-627c-4d8f-9235-75c5277c008d    Scarecrow       Dr. Jonathan Crane, better known as the Scarec...   character   37\n7   3ce572cc-e970-4ad0-ac50-50fc07a34114    Poison Ivy      Pamela Isley, also known as Poison Ivy, posses...   character   28\n8   c11d5797-df30-4bfc-8657-102d29ef2d0e    Firefly         Firefly is a pyromaniac and an expert in fire ...   character   35\n9   2cf55198-0608-46de-b99e-62816a3cc22b    Man-Bat         Man-Bat is a scientist who accidentally turns ...   character   45\n10  368fcef1-024d-4240-8e56-2fea45ecd015    Mad Hatter      Mad Hatter is a deranged inventor who uses min...   character   50\n11  a517bfb5-348f-4805-b193-e6e38a82dff8    Black Mask      Black Mask is a ruthless crime lord who wears ...   character   40\n12  7cd54180-9bb4-4ddb-b086-2663cbb3f99f    Mr. Freeze      Mr. Freeze is a scientist who, after a lab acc...   character   55\n13  9a30169c-6c5a-48e8-b342-446bdd22649d    Red Hood        Formerly the second Robin, Jason Todd, the Red...   character   25\n14  c25ad735-3b07-44a6-b049-81c3718e823c    Nightwing       Dick Grayson, the original Robin, now patrols ...   character   27\n15  5b491de9-55ad-49af-9199-27f9c0e08c9c    Batwoman        Kate Kane, the cousin of Bruce Wayne, took up ...   character   28\n16  571c753e-1c5a-4748-b9b3-4bced34f6f9b    Hush            Dr. Thomas Elliot, a childhood friend of Bruce...   character   35\n17  da1d4926-5e06-4b2f-b781-74b8f31947a6    Oracle          Formerly known as Batgirl, Barbara Gordon now ...   character   31\n18  25bccd8e-9237-4f1c-89a6-bd2338eaff21    Azrael          Jean-Paul Valley, an assassin trained by a sec...   character   30\n19  762ec2cb-1f82-4756-9573-a8073800b388    Ace             Ace is a highly intelligent and agile dog that...   character   5\n20  0f5b46af-1051-4baf-8afd-6df546edf48a    Echo            Echo is a skilled thief with the ability to di...   character   25\n21  4a07195a-2cdf-42d5-987f-daf39a57e4f2    Siren           Siren is a seductive and dangerous femme fatal...   character   28\n22  62a09be3-dac3-4a99-956e-67418e9230e1    Talon           Talon is a highly trained assassin who serves ...   character   35\n23  d9e96327-753e-4b99-867a-99b610b218e3    Shadow          Shadow is a mysterious vigilante who operates ...   character   30\n24  590d1c0f-dd59-479d-a675-53a1ba55e91b    Batgirl         Batgirl is the female counterpart to Batman. S...   character   25\n25  74d802e0-30dd-46c3-a57c-b8594b7747db    Penguin         The Penguin is a cunning and manipulative crim...   character   45\n26  e694ca90-d7f5-40a1-9377-86d9a6b00b41    Black Canary    Black Canary is a highly trained martial artis...   character   28\n27  f8e7247b-541b-4ee6-bbd8-65bb300cfa5d    Killer Croc     Killer Croc is a mutated crocodile-human hybri...   character   35\n28  e037e9e7-7965-4508-9134-6cdf2f886b03    Professor Pyg   Professor Pyg is a deranged surgeon and sadist...   character   40\n")),(0,r.kt)("h2",{id:"updating-data"},"Updating data"),(0,r.kt)("p",null,"You can update existing data using standard ",(0,r.kt)("strong",{parentName:"p"},"Pandas")," transformations and storing the updated dataframe:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"villains['evil'] = True\nstore(villains)\n")),(0,r.kt)("p",null,"This adds an ",(0,r.kt)("inlineCode",{parentName:"p"},"evil")," column to the dataframe and assigns it a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"True")," for all rows in the villain collection."),(0,r.kt)("h2",{id:"wrapping-up"},"Wrapping up"),(0,r.kt)("p",null,"Finally, lets use the techniques we've learned to generate some story ideas:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class StoryIdea(BaseModel):\n    title: str\n    description: str = None\n    characters: List[str] = []\n\nbatman = query('Bruce Wayne').first\nvillains = query('they are a villain').sample(3)\n\nideas = prompt(\n    'Generate some story ideas',\n    input={\n        'characters': [batman] + villains.objects,\n    },\n    output=List[StoryIdea],\n)\n")),(0,r.kt)("p",null,"Now lets store them in a new collection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from promptz import collection\n\nstore(ideas, collection='story_ideas')\ncollection('story_ideas')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    id                                      title                   description                                         type        characters\n0   4a234823-b560-4aae-a152-be970d49ff22    The Dark Knight Rises   As Gotham City faces its darkest hour, Batman ...   storyidea   [Batman, Shadow, Talon, Black Mask]\n1   a89c556e-952a-4075-a447-429dc2c7fd89    Shadows of Revenge      When a series of mysterious murders shakes Got...   storyidea   [Shadow, Talon, Black Mask]\n2   47ee7f37-07d3-4b79-862a-387f52ef7779    Deadly Pursuit          Talon embarks on a relentless pursuit to elimi...   storyidea   [Talon, Batman, Shadow]\n3   d62d296e-5821-4455-8d48-335749d01e59    The Reign of Black Mask Black Mask's grip on Gotham City tightens as h...   storyidea   [Black Mask, Batman]\n")))}h.isMDXComponent=!0}}]);